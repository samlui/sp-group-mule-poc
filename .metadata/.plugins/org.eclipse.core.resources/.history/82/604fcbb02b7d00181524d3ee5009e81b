<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:dbserver="http://www.mulesoft.org/schema/mule/dbserver" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd
http://www.mulesoft.org/schema/mule/dbserver http://www.mulesoft.org/schema/mule/dbserver/current/mule-dbserver.xsd">
    <spring:beans>
        <spring:import resource="classpath:munit-demo.xml" />
    </spring:beans>
    <munit:config mock-connectors="false" mock-inbounds="false" doc:name="MUnit configuration"/>
    <http:request-config name="HTTP_Request_Configuration" host="localhost" port="8081" basePath="/api" doc:name="HTTP Request Configuration"/>
    <munit:test name="get:/book/{id}:api-config-200-application/json-FlowTest" description="Verifying functionality of [get:/book/{id}:api-config-200-application/json]">
       <mock:when messageProcessor=".*:.*" doc:name="Mock Price API">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Get book price']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[payload]" mimeType="application/json">
                <mock:invocation-properties>
                    <mock:invocation-property key="bookPrice" value="{ &quot;price&quot; : 33.23 , &quot;currency&quot; : &quot;USD&quot;  }" mimeType="application/json"/>
                </mock:invocation-properties>
            </mock:then-return>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock Warehouse API">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Get book stock']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[payload]" mimeType="application/json">
                <mock:invocation-properties>
                    <mock:invocation-property key="bookStock" value="{ &quot;quantity&quot; : 12010, &quot;measure&quot; : &quot;units&quot; }" mimeType="application/json"/>
                </mock:invocation-properties>
            </mock:then-return>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock DB">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Get book']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[[[&quot;id&quot;: 121293, &quot;isbn_code&quot;: &quot;978-3-16-148410-0&quot;, &quot;cat&quot;: &quot;hardcover&quot;, &quot;name&quot;: &quot;The Lightning Thief&quot;, &quot;author&quot;: &quot;Rick Riordan&quot;, &quot;series&quot;: &quot;Percy Jackson and the Olympians&quot;, &quot;sequence_num&quot;: 1, &quot;genre&quot;: &quot;fantasy&quot;, &quot;pages_num&quot;: 384]]]"/>
        </mock:when>
        <mock:spy messageProcessor=".*:.*" doc:name="Spy at DB invocation">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Get book']"/>
            </mock:with-attributes>
            <mock:assertions-before-call>
                <munit:assert-on-equals message="Payload was not null" expectedValue="#['']" actualValue="#[payload.trim()]" doc:name="Check payload is empty"/>
                <munit:assert-not-same message="bookStock flowVars is null" expectedValue="#[null]" actualValue="#[flowVars.bookStock]" doc:name="Assert bookStock Not null"/>
            </mock:assertions-before-call>
        </mock:spy>
<!--         <dbserver:start-db-server config-ref="DB_Server" doc:name="DB Server"/> -->
        <set-variable variableName="id" value="#[121293]" doc:name="id" />
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/book/#[flowVars['id']]" doc:name="HTTP"/>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <munit:assert-on-equals message="Response is not the expected one" expectedValue="#[com.mule.munit.demo.TestUtils.getComparableJsonObject('{&quot;id&quot; : 121293,&quot;isbn&quot; : &quot;978-3-16-148410-0&quot;,&quot;category&quot; : &quot;hardcover&quot;,&quot;name&quot; : &quot;The Lightning Thief&quot;,&quot;author&quot; : &quot;Rick Riordan&quot;,&quot;serie&quot; : &quot;Percy Jackson and the Olympians&quot;,&quot;sequence&quot; : 1,&quot;genre&quot; : &quot;fantasy&quot;,&quot;inStock&quot; : true,&quot;price&quot; : 33.23,&quot;stock&quot; : 12010,&quot;pages&quot; : 384}')]" actualValue="#[com.mule.munit.demo.TestUtils.getComparableJsonObject(payload)]" doc:name="assert that - payload is as expected"/>
    </munit:test>
    <munit:test name="post:/book:application/json:api-config-200-application/json-FlowTest" description="Verifying functionality of [post:/book:application/json:api-config-200-application/json]">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Insert book']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[[[&quot;GENERATED_KEY&quot; : 123]]]"/>
        </mock:when>
        <munit:set payload=" { &quot;isbn&quot; : &quot;978-3-16-148410-0&quot;, &quot;category&quot; : &quot;hardcover&quot;, &quot;name&quot; : &quot;The Lightning Thief&quot;, &quot;author&quot; : &quot;Rick Riordan&quot;, &quot;serie&quot; : &quot;Percy Jackson and the Olympians&quot;, &quot;sequence&quot; : 1, &quot;genre&quot; : &quot;fantasy&quot;, &quot;pages&quot; : 384 }" mimeType="application/json" doc:name="Set Message"/>
        <http:request config-ref="HTTP_Request_Configuration" method="POST" path="/book" doc:name="HTTP"/>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <munit:assert-on-equals message="Response is not the expected one" expectedValue="#[com.mule.munit.demo.TestUtils.getComparableJsonObject('{&quot;id&quot; : 123}')]" actualValue="#[com.mule.munit.demo.TestUtils.getComparableJsonObject(payload)]" doc:name="assert that - payload is as expected"/>
    </munit:test>
</mule>
